People's names next to entries in this file mean they intend to work on that
item soon.  Please contact them before working on related areas, to avoid
duplication of effort and to make sure our changes merge easily.

* Evaluations:
** Add more evaluation classes.
*** Add a neural net to correct errors in BEAROFF1 class.
*** Classes for bearing off against contact, back games, containment
  positions, prime-vs-prime...
*** Consider meta-pi scheme for using output from multiple nets.
** Add partial searching.
** Merge Joseph Heled's faster evaluation code.

* Game play:
** Add cube handling for computer player.
** Make "new game" ask "are you sure?" if invoked while a game is in
  progress.
** Finish the "set cube" subcommands.

* Command interface:
** Check "show" exists for every "set"!
** Allow setting long seeds for dice generators that support them.
** Add more completions to help and readline.
** Allow user to vary parameters for rollouts.
** Allow timeouts for "train" (and others?).
** Load, save and analyse games and matches.  Also load matches given
  as command line parameters.
** Finish saving positions and evaluations to databases.
** Finish supervised training, and allow people to submit training data via
  web.
** Write a proper input routine which will read a line from stdin under all
  conditions (with or without X, with or without readline, and whether
  stdin is a TTY or not).  Echo commands input with the mouse as if they had
  been typed (this is nontrivial if a partial TTY command has been entered).
  (gary)
** Allow abbreviation of multiple moves (e.g. "8/7(2) 6/5(2)") and
  concatenation of moves (e.g. "24/18*/13").
** Finish "help" -- add detailed help for each command.
** Add undo, reroll, and viewing next/prev moves in game/match. (gary)
** Allow reading commands from scripts.  A .gnubgrc file would contain
  startup commands.  This needs some thought to make sure it works well
  with Guile scripts.
** Add "!" as a shell escape.
** Add ":" as a Guile escape, once it's here.
** When "set board" is given with no parameters under X, set it to the
  current position displayed in the board window.

* X interface:
** Get rid of Xmu calls in ext (they're not really portable). (gary)
** Allow copy/paste and drag & drop of the board ID in the board window. (gary)
** Make sure the board window behaves properly with ICCCM things.  Maybe
  some of this should wait for Gnome.
** Keyboard input (or at least some of it) to the board window could
  be redirected to $WINDOWID. (gary)
** Allow doubling by clicking the cube in the board window.  (gary)
** Add an option to slow down display if moves happen too quickly (e.g.
  computer move, unable to move, auto bearoff, etc.)
** Perform better move checking in the X window; provide visual feedback
  so the user can tell whether the move is partial, complete, or illegal.
** Add a board edit mode.  What would be the best semantics for the
  interface?
** Try to use some optimisation like XCheckIfEvent() to ignore all but
  the most recent MotionNotify event in the queue when dragging chequers.
** Add Gnome support.  This may also allow us to fix the problem of being
  unresponsive to X events during long computations, which I don't think
  is worth fixing until then.  Better to wait until Gnome is rock solid,
  I think.
*** Add silly bells and whistles.  Things like colour selector for chequer
  colours, angle of light, surface of pieces, transparent background, etc.
*** Add menus and dialogs so that games can be played without the
  terminal window at all.

* Bugs:
** Evaluations bearing off against contact and in back games are poor.
  Joseph Heled has improved performance here.
** Think about what should happen with variance reduction in Rollout()
  and RolloutGame() when a probability turns out <0 or >1.
** Undoing a move that hit a blot in the X window doesn't restore the blot.
** When X and readline are enabled, using the board window to play while
  the rng is set to manual really confuses the terminal (readline has
  left the TTY in a silly state while GetManualDice() is trying to
  read).  To fix this properly will take far cleverer input handling
  (we want to be responsive to X events and stdin, which more or less
  means that while waiting for any kind of input we must be in
  the top level HandleEvents(); this makes it very difficult for routines
  like GetManualDice which want to block until input is ready).  Also,
  what happens when the user types half a command and then moves with
  the mouse which causes the manual dice prompt?  All this mess can
  probably wait for Gnome. (gary)

* Miscellaneous:
** Add internationalisation (gettext).
** Use Guile if available.
** Add a self-test to the distribution.
** Add more to http://www.gnu.org/software/gnubg/... -- definitely the
  HTML formatted manual, and perhaps pages to submit training data,
  an online evaluator like Monte Carlo, maybe even an entire game like
  Motif.
** Complete the Texinfo manual.  Perhaps for now, only things that are
  unlikely to change should be documented.
** When $USER, $LOGNAME, getlogin(), getpwnam() or equivalent is available,
  set the player name to the user's name.  (Maybe this isn't a good idea.)
