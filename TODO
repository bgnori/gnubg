People's names next to entries in this file mean they intend to work on that
item soon.  Please contact them before working on related areas, to avoid
duplication of effort and to make sure our changes merge easily.

* Evaluations:
** Allow different settings (e.g. search ply, candidates, tolerance) for each
  position class.
** Add more evaluation classes.
*** Add a neural net to correct errors in BEAROFF1 class.
*** Classes for bearing off against contact, back games, containment
  positions, prime-vs-prime...
*** Consider meta-pi scheme for using output from multiple nets.
** Add partial searching.
** See http://www.oasya.com/CubefulAdvantages.html for example of
  cubeful evaluation.

* Game play:
** Add cube handling for computer player.  See tag "thyssen-double-branch"
  in the CVS archive for work on this.
** Make "new game" ask "are you sure?" if invoked while a game is in
  progress.  To do it properly requires improved input routines. (gary)

* Command interface:
** Check "show" exists for every "set"!
** Add more completions to help and readline.
** Allow timeouts for "train" (and others?).
** Load, save and analyse games and matches.  Also load matches given
  as command line parameters.
** Finish saving positions and evaluations to databases.
** Finish supervised training, and allow people to submit training data via
  web.
** Write a proper input routine which will read a line from stdin under all
  conditions (with or without X, with or without readline, and whether
  stdin is a TTY or not).  Echo commands input with the mouse as if they had
  been typed (this is nontrivial if a partial TTY command has been entered).
  (gary)
** Write fancy output routines (to replace printf, puts, etc.) that wraps
  words and pauses before scrolling (as in gdb).
** Extend FormatMove() and ParseMove() to handle abbreviation of
  multiple moves (e.g. "8/7(2) 6/5(2)").  Make FormatMovePlain()
  use the old ugly format for JF compatibility (25 not bar, 0 not off,
  and check whether * for hits is OK).
** Finish "help" -- add detailed help for each command.
** Add undo, reroll, and viewing next/prev moves in game/match.  (Reroll
  is not really necessary, since "set turn <player>" will let them roll
  again.)
** Allow reading commands from scripts.  A .gnubgrc file would contain
  startup commands.  This needs some thought to make sure it works well
  with Guile scripts.
** Add "!" as a shell escape.
** Add ":" as a Guile escape, once it's here.
** When "set board" is given with no parameters under X, set it to the
  current position displayed in the board window.  (Perhaps a button in
  the board window would be better.)
** Show rollout results while in progress, and allow resuming interrupted
  rollouts.

* X interface:
** Get rid of Xmu calls in ext (they're not really portable). (gary)
** Allow copy/paste and drag & drop of the board ID in the board window. (gary)
** Make sure the board window behaves properly with ICCCM things.  Maybe
  some of this should wait for Gnome.
** Add a board edit mode.  What would be the best semantics for the
  interface?
** Try to use some optimisation like XCheckIfEvent() to ignore all but
  the most recent MotionNotify event in the queue when dragging chequers.
** Allow clicking on a point to make that point.
** Use the MBX (multi buffering) and SHM (shared memory) extensions in the
  board window, if available.
** Add Gnome support.  Better to wait until Gnome is rock solid, I think.
*** Add silly bells and whistles.  Things like colour selector for chequer
  colours, angle of light, surface of pieces, transparent background, etc.
*** Add menus and dialogs so that games can be played without the
  terminal window at all.

* Bugs:
** Rollout(), CommandTrainTD(), CommandDatabaseGenerate() and
  CommandDatabaseTrain() shouldn't output progress reports to stdout
  if it isn't a TTY. (gary)
** Think about what should happen with variance reduction in Rollout()
  when a probability turns out <0 or >1.
** When X and readline are enabled, using the board window to play
  while the rng is set to manual really confuses the terminal
  (readline has left the TTY in a silly state while GetManualDice() is
  trying to read).  It also means that the interrupt key won't work on
  commands initiated from the mouse.  To fix this properly will take
  far cleverer input handling (we want to be responsive to X events
  and stdin, which more or less means that while waiting for any kind
  of input we must be in the top level HandleEvents(); this makes it
  very difficult for routines like GetManualDice which want to block
  until input is ready).  Also, what happens when the user types half
  a command and then moves with the mouse which causes the manual dice
  prompt?  "set delay" is related to this; other things should happen
  while waiting for the delay. (gary)
** When the interrupt key is pressed during processing in response to
  a board window event, "(Interrupted)" is not shown. (gary)
** Make sure that ComputerMove() updating anBoard and the call to
  NextTurn() are atomic, even if a SIGINT occurs. (gary)
** Nothing handles running out of memory gracefully.  A solution
  could be to write a malloc() wrapper that (if malloc fails) first
  tries to free memory (e.g. flush the eval cache); if malloc still
  doesn't succeed, then print an error message and longjmp() to the
  main loop.

* Documentation:
** Complete the Texinfo manual.  Perhaps for now, only things that are
  unlikely to change should be documented.
** Describe the ASCII vs. binary weights behaviour.

* Miscellaneous:
** Add internationalisation (gettext).
** Add a self-test to the distribution.
** Add more to http://www.gnu.org/software/gnubg/... -- definitely the
  HTML formatted manual, and perhaps pages to submit training data,
  an online evaluator like Monte Carlo, maybe even an entire game like
  Motif.
** Allow loading and saving weights to specify binary or ASCII format.
** Allow annotating moves in matches.  It would be nice to be compatible
  with other formats (Snowie?  CBG?) but these are probably undocumented.
  The SGF format (Smart Game Format -- see <http://www.red-bean.com/sgf/>)
  can probably be extended to backgammon, instead.
** Export matches (and analysis) to ASCII, HTML, PostScript, etc.
** mtrace() debugging at some point. (gary)
