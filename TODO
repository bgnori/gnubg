People's names next to entries in this file mean they intend to work on that
item soon.  Please contact them before working on related areas, to avoid
duplication of effort and to make sure our changes merge easily.

* Evaluations:
** Allow different settings (e.g. search ply, candidates, tolerance) for each
  position class.
** Add more evaluation classes.
*** Write a better race evaluator.
*** Add a neural net to correct errors in BEAROFF1 class.
*** Classes for bearing off against contact, back games, containment
  positions, prime-vs-prime...
*** Consider meta-pi scheme for using output from multiple nets.
** See http://www.oasya.com/CubefulAdvantages.html for example of
  cubeful evaluation.
** Improve quasi-random dice generation for rollouts. (gary)
** Create multiple threads to parallelise rollouts (and evaluations?) on
  multiprocessors.  Perhaps start remote processes?
** Add more statistics for rollouts (e.g. number of times each player hit,
  number of turns on the bar, whether each player is closed out, average
  number of pips wasted bearing off, etc.)

* Game play:
** Add cube handling for computer player.  See tag "thyssen-double-branch"
  in the CVS repository for work on this.

* Command interface:
** Add more completions to readline.
** Allow timeouts for "train" (and others?).
** Add interactive rollouts.
** Load, save and analyse games and matches.
** Finish saving positions and evaluations to databases.
** Finish supervised training, and allow people to submit training data via
  web.
** Make sure input behaves correctly when stdin is not a TTY. (gary)
** Make output*() functions wrap words, and pause before scrolling (as in
  gdb).  Make sure output to stderr is available when using GTK -- perror
  calls will have to be replaced, for instance.
** Extend FormatMove() and ParseMove() to handle abbreviation of
  multiple moves (e.g. "8/7(2) 6/5(2)").
** Add undo, reroll, and viewing next/prev moves in game/match.  (Reroll
  is not really necessary, since "set turn <player>" will let them roll
  again.)
** Allow reading commands from scripts.  A .gnubgrc file would contain
  startup commands.  This needs some thought to make sure it works well
  with Guile scripts.
** Add ":" as a Guile escape, once it's here.
** Allow resuming interrupted rollouts.
** Save partial input when TTY input is overwritten by an X command.
  The best way would be to unify what GetInput does and ProcessInput,
  with push/pop semantics for readline state. (gary)

* X interface:
** Get rid of Xmu calls in ext (they're not really portable). (gary)
** Don't flood the server with requests (which can happen if gnubg is
  playing itself at ply 0).  Wait until the server has finished the
  previous ShowBoard before sending a new one; boards in the meantime
  can be silently discarded.  What does xterm do to implement jump
  scrolling?
** Use the MBX (multi buffering) and SHM (shared memory) extensions in the
  board window, if available.

* GTK interface:
** Add a game window, which lists the moves made in the game so far and
  allows moving back and forth.
** Make sure the board window behaves properly with ICCCM things.
** Allow copy/paste and drag & drop of the board ID in the board window.
** Add silly bells and whistles.  Things like colour selector for chequer
  colours, angle of light, surface of pieces, transparent background, etc.
** Finish menus (settings, in particular).  Make sure there is a GUI
  equivalent for every command.
** Add a prompt and entry field to allow commands to be entered (replacing
  stdin).
** Allow the user to decide whether short messages appear in dialogs
  instead of the status bar, or whether all messages are appended to a
  message window.
** Disable the set/edit buttons in the board window when no game is in
  progress.  (Disable appropriate menu items, too.)
** Add a "stop" button which sets fInterrupt; this should be the grab
  widget when gnubg is busy.
** Add optional point number labels on the board.
** Position the "move" widget (that displays the move in progress) higher
  up, to the left of the "roll dice" widget.
** Move the Crawford menu item to the name/score table.
** The "Set" position button is superfluous.

** Dialogs:
*** Make "eval" show its output in tables in a dialog.  This will need
  changes in eval.c to give the information in a useful form; probably
  a "DumpPositionRaw".
*** Make slow commands which currently use carriage returns to update
  their status use a progress bar in a dialog (like rollouts).
*** Make "help" show its output in a CList.  There must be a button in
  the dialog to allow the user to recurse through help for subcommands.

* Bugs:
** Nothing handles running out of memory gracefully.  A solution
  could be to write a malloc() wrapper that (if malloc fails) first
  tries to free memory (e.g. flush the eval cache); if malloc still
  doesn't succeed, then print an error message and longjmp() to the
  main loop.  When using the GNU C library, __malloc_hook can be used
  too (so we can intercept calls coming from Xlib, for instance).  We
  shouldn't longjmp() out of the hook, though (it might confuse library
  functions).
** If the exposed area in BoardRedraw() intersects a point but not the
  dice, the point will be redrawn -- but sometimes that will overwrite
  the dice, which then need updating.
** The erroneous commands "set player both" and "set player both evaluation"
  give poor error messages; "set score -1 -1" gives a bad message too (it
  should be redefined to set 1-away, 1-away); "help r" doesn't do anything.
** The GTK code uses ConnectionNumber() at various places to detect X
  events.  This is unportable and ugly; find something better. (gary)

* Documentation:
** Complete the Texinfo manual.  Perhaps for now, only things that are
  unlikely to change should be documented.

* Miscellaneous:
** Add internationalisation (gettext).
** Add more to http://www.gnu.org/software/gnubg/... -- definitely the
  HTML formatted manual, and perhaps pages to submit training data,
  an online evaluator like Monte Carlo, maybe even an entire game like
  Motif.
** Submit something to <http://www.distributed.net/nextgen/projects.html>.
** Allow loading and saving weights to specify binary or ASCII format.
** Allow annotating moves in matches.  It would be nice to be compatible
  with other formats (Snowie?  CBG?) but these are probably undocumented.
  The SGF format (Smart Game Format -- see <http://www.red-bean.com/sgf/>)
  can probably be extended to backgammon, instead.
** Export matches (and analysis) to ASCII, HTML, PostScript, etc.
** Import and export position databases to a portable format.
** Add option to flip the board.
** Find someone who lives near London and wants to enter gnubg in the
  MSO Olympiad in August: <http://www.msoworld.com/Olympiad/computer.html>.
** Think about generating huge databases for CD-ROMs (we can get 1-sided
  databases for all chequers up to the 11 point, or 2-sided databases where
  both players have up to 11 chequers in the home board onto a CD-ROM).
** Move the built-in RNGs into lib/; they can then be used instead of
  rand_r for better quality random numbers and improved portability.
** Having recursive configure.in files isn't working very well.  It would
  be better to move everything into the top level configure.in.  This makes
  having standalone lib (event) and ext packages more difficult, but that
  probably isn't critical any more.
