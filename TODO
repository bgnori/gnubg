People's names next to entries in this file mean they intend to work on that
item soon.  Please contact them before working on related areas, to avoid
duplication of effort and to make sure our changes merge easily.

* Evaluations:
** Allow different settings (e.g. search ply, candidates, tolerance) for each
  position class. Also allow different settings for cube action.
** Add more evaluation classes.
*** Add a neural net to correct errors in BEAROFF1 class.
*** Classes for bearing off against contact, back games, containment
  positions, prime-vs-prime...
*** Consider meta-pi scheme for using output from multiple nets.
** See http://www.oasya.com/CubefulAdvantages.html for example of
  cubeful evaluation. The current money game code can do cubeful
  evaluations (currently only used for cube action) but it should be
  easy to write code for cubeful checkerplay (i.e. let FindBestMove call
  EvaluatePositionCubeful instead of EvaluatePosition). For cubeful
  checkerplay there should probably be a rScore2 field with the
  cubeless equity which, when two
  moves give (exactly) the same equity, is used as score (e.g. when
  two moves both are so bad that the opponent should double, and we 
  should pass, both moves have cubeful equity -1. But the opponent
  might not double, in which case it had been best to choose the
  move with highest cubeless equity. (thyssen)
** Add another "eval"-like command that show the distribution of
  equities n rolls ahead.  SW does bar graphs of this stuff; Cam Trenor
  suggests alternative output.
** Improve quasi-random dice generation for rollouts. (gary)
** Create multiple threads to parallelise rollouts (and evaluations?) on
  multiprocessors.  Perhaps start remote processes?
** Add more statistics for rollouts (e.g. number of times each player hit,
  number of turns on the bar, whether each player is closed out, average
  number of pips wasted bearing off, etc.)
** Add cubeful rollouts
** Make gnubg offer resignations when its position is hopeless.
** Bearoff database changes:
*** Use a more intelligent encoding in the 1-sided database, to conserve
  space.
*** Joseph notes the 1-sided bearoff database is nearly as good as the
  2-sided.  Add an option to omit the 2-sided one, to conserve disk
  and memory space.  (And time to generate them -- on a 330MHz Pentium II,
  it takes 3 minutes to generate the 1-sided database and 20 for the
  2-sided.)

* Commands:
** Add more completions to readline (player names, filenames for load/save).
** Allow timeouts for "train" (and others?).
** Add interactive rollouts.
** Analyse games and matches.
** Finish saving positions and evaluations to databases.
** Finish supervised training, and allow people to submit training data via
  web.
** Make sure input behaves correctly when stdin is not a TTY. (gary)
** Make output*() functions wrap words, and pause before scrolling (as in
  gdb).  Make sure output to stderr is available when using GTK -- perror
  calls will have to be replaced, for instance.
** Extend FormatMove() and ParseMove() to handle abbreviation of
  multiple moves (e.g. "8/7(2) 6/5(2)").
** Allow "next game [n]" and "previous game [n]" for selecting other games
  in the match.
** Allow resuming interrupted rollouts.
** Save partial input when TTY input is overwritten by an X command.
  The best way would be to unify what GetInput does and ProcessInput,
  with push/pop semantics for readline state. (gary)
** Change "set beavers" to allow a limit on the number of beavers
  permitted.
** Add some kind of command to perform batch rollouts.
*** Make "hint" label the moves it lists, and allow you to roll out
  a choice of alternatives.
** Add a "set record" command; when "record" is off, no moves are
  recorded (which implies that "save", "list" and the game list window
  won't work, but it will save memory for situations like playing
  10,000 games vs. pubeval).

* Guile:
** Add more data types and Scheme bindings for useful functions.
** Remove the board smob.  Boards would be better represented as a
  pair of vectors (whoops).

* TTY interface:
** Display the score and match length in ShowBoard().

* X interface:
** Get rid of Xmu calls in ext (they're not really portable). (gary)
** Use the MBX (multi buffering) and SHM (shared memory) extensions in the
  board window, if available.

* GTK interface:
** Make sure the board window behaves properly with ICCCM things.
** Allow copy/paste and drag & drop of the board ID in the board window.
** Add silly bells and whistles.  Things like colour selector for chequer
  colours, angle of light, surface of pieces, transparent background, etc.
** Finish menus (settings, in particular).  Make sure there is a GUI
  equivalent for every command.
** Add a prompt and entry field to allow commands to be entered (replacing
  stdin).
** Allow the user to decide whether short messages appear in dialogs
  instead of the status bar, or whether all messages are appended to a
  message window.
** Disable the set/edit buttons in the board window when no game is in
  progress.  (Disable appropriate menu items, too.)
** Add a "stop" button which sets fInterrupt; this should be the grab
  widget when gnubg is busy.
** Add optional point number labels on the board.
** Remove the superfluous "Set" position button.
** Add a "Reset" button that restores the position, from
  before the user started to move or edit the position [is useful for
  undoing moves]. Alternatively there could be button for restoring the
  last moved checker, and one for restoring all checkers moved. 
** Add "beavers" in the Set menu.
** Have a progress bar along with some text in the main window, which
   indicates progress for the current possibly time-consuming operation.
   E.g. when the user clicks 'hint' the progress text will show
   "finding best moves..." and the progress bar will indicate how far
   gnubg is in the process. This could/should be implemented for
   "evaluation", "hint", when gnubg is considering cube action,
   when gnubg is searching for it's best move etc.
** Left mouse moves checker left-die, the two dice then interchanges,
  and the user can now move the other die. If the user clicks a
  checker that cannot be moved with the left die, it should move the 
  checker with the right die if possible [this is analogous to the
  behaviour in Snowie].
** Add progress indicators for everything that checks fShowProgress.
  A function that generates a progress bar/ASCII to stdout would help.
** Add a pop-up menu in the game list window to allow selection of old games.
** Show "take" and "drop" buttons in the off-board dice window when
  a double is offered; also "agree" and "decline" for resignations.

** Dialogs:
*** Make "eval" show its output in tables in a dialog.  This will need
  changes in eval.c to give the information in a useful form; probably
  a "DumpPositionRaw".
*** Make "help" show its output in a CList.  There must be a button in
  the dialog to allow the user to recurse through help for subcommands.
*** Update GTKHint to match the new TTY hint, and add a scrollbar to
  the hint window. (gary)

* Bugs:
** Nothing handles running out of memory gracefully.  A solution
  could be to write a malloc() wrapper that (if malloc fails) first
  tries to free memory (e.g. flush the eval cache); if malloc still
  doesn't succeed, then print an error message and longjmp() to the
  main loop.  When using the GNU C library, __malloc_hook can be used
  too (so we can intercept calls coming from Xlib, for instance).  We
  shouldn't longjmp() out of the hook, though (it might confuse library
  functions).
** The erroneous commands "set player both" and "set player both evaluation"
  give poor error messages; "set score -1 -1" gives a bad message too (it
  should be redefined to set 1-away, 1-away); "help r" doesn't do anything.
** The GTK code uses ConnectionNumber() at various places to detect X
  events.  This is unportable and ugly; find something better. (gary)
** "set player <tab>" gives incorrect completions.
** When using GTK, some output is lost for (e.g.) "set player both human".
  It should show in a dialog, not in the status bar.
** When the game window is full, resizing it makes it MUCH bigger
  than it should be.
** When ShowBoard() postpones an update, the off-board dice are not set.
  ("next" and "previous" don't change the dice, either -- it would be nice
  to add an external interface to change them.)
** Cosmetic problems when a "set board" is shown in the game list (the
  wrong cell is highlighted).

* Documentation:
** Complete the Texinfo manual.  Perhaps for now, only things that are
  unlikely to change should be documented.

* Miscellaneous:
** Add internationalisation (gettext).
** Add more to http://www.gnu.org/software/gnubg/... -- perhaps pages to
  submit training data, an online evaluator like Monte Carlo, maybe even an
  entire game like Motif.
** Submit something to <http://www.distributed.net/nextgen/projects.html>.
** Allow loading and saving weights to specify binary or ASCII format.
** Allow annotating moves in matches (both human commentary and automatic
  analysis).
** Export matches (and analysis) to ASCII, HTML, PostScript, etc.
** Import and export position databases to a portable format.
** Add option to flip the board.
** Think about generating huge databases for CD-ROMs (we can get 1-sided
  databases for all chequers up to the 11 point, or 2-sided databases where
  both players have up to 11 chequers in the home board onto a CD-ROM).
** Move the built-in RNGs into lib/; they can then be used instead of
  rand_r for better quality random numbers and improved portability.
** Having recursive configure.in files isn't working very well.  It would
  be better to move everything into the top level configure.in.  This makes
  having standalone lib (event) and ext packages more difficult, but that
  probably isn't critical any more.
** Add optional time rules, for tournament play when clocks are used.


Local Variables:
mode: outline
End:
