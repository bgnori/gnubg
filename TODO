People's names next to entries in this file mean they intend to work on that
item soon.  Please contact them before working on related areas, to avoid
duplication of effort and to make sure our changes merge easily.

* Evaluations:
** Allow different settings (e.g. search ply, candidates, tolerance) for each
  position class. Also allow different settings for cube action.
** Add more evaluation classes.
*** Add a neural net to correct errors in BEAROFF1 class.
*** Classes for bearing off against contact, back games, containment
  positions, prime-vs-prime...
*** Consider meta-pi scheme for using output from multiple nets.
** Add another "eval"-like command that show the distribution of
  equities n rolls ahead.  SW does bar graphs of this stuff; Cam Trenor
  suggests alternative output.
** Improve quasi-random dice generation for rollouts. (gary)
** Create multiple threads to parallelise rollouts (and evaluations?) on
  multiprocessors.  Perhaps start remote processes?
** Add more statistics for rollouts (e.g. number of times each player hit,
  number of turns on the bar, whether each player is closed out, average
  number of pips wasted bearing off, etc.)
** Add Michael Zehr's method for cube variance reduction in money games.
** Add a cache for cubeful evaluations.
** Joseph has weights for small (5 hidden nodes) nets, which could be
  used for the internal evaluations of deep searches for a significant
  speed increase.  See FindBestMoveInEval() in eval.c from fibs2html.
** Add an option for rollouts of "opening" positions: neither player on
  roll, and no doubles permitted (suggested by Ian Shaw).  (A
  "set rollout initial" command has been added, but it has no effect yet.)
** Consider making EvalEfficiency() more sophisticated.
** Bearoff database changes:
*** Use a more intelligent encoding in the 1-sided database, to conserve
  space.
*** Joseph notes the 1-sided bearoff database is nearly as good as the
  2-sided.  Add an option to omit the 2-sided one, to conserve disk
  and memory space.  (And time to generate them -- on a 330MHz Pentium II,
  it takes 3 minutes to generate the 1-sided database and 20 for the
  2-sided.)

* Commands:
** Add interactive rollouts.
** Analyse games and matches.
*** Add an "analyse move" command.
*** Allow re-evaluating analysis with different settings, and rollouts.
*** Add "set automatic analysis".
*** Make sure cube analysis works for beavers.
*** Should luck be evaluated cubefully?  (An option, perhaps?)
*** Use the fComputed field in statcontext (make "show statistics ..."
  complain if not computed, disable the GTK menu items if not available).
*** Make sure analysis works with resignations.
*** Consider a way for analysis to mark _good_ moves (e.g. moves which are
  flagged as errors at 0-ply but turn out to be correct at higher plies).
** Finish saving positions and evaluations to databases.
** Finish supervised training, and allow people to submit training data via
  web.
** Make output*() functions wrap words, and pause before scrolling (as in
  gdb).  Make sure output to stderr is available when using GTK -- perror
  calls will have to be replaced, for instance.
** Allow resuming interrupted rollouts, and extending completed rollouts.
** Add a command "show moves" which shows a list of legal moves, like hint
  does, but without evaluating them.
** Also "add move", to add a specific move to the list (e.g.
  "add move 8/5 6/5").
** Kit suggests that it's more important to get early plays right in
  rollouts.  Should we consider options that allow larger search space/
  search depth/etc. for early moves in rollouts than later ones?  (Kit's
  suggestion is to maximise the chance of finding the right play for
  the initial roll and response, and whatever speeds things along while
  still finding reasonable plays after that.)
** Make "save settings" accept a filename parameter.
** Allow saving positions in SGF. (gary)
** Importing and exporting:
*** Add missing export formats (FIBS, SGG).
*** Make the .mat format identical to Jellyfish (things to check:
  beavers, resignations, "and the match"...)
*** Check drops, beavers, resignations, implement Crawford and Jacoby etc. in
  SGG importing.
*** Export to ASCII.
*** Improve the LaTeX, PS and PDF output:
**** Add commands to change paper size, board magnification, and number of
  move candidates listed in analysis. (gary)
**** Show game and match statistics (if available) at end of game/match.
**** Allow some option for selecting which boards to print (see the
  "FG" SGF property).

* Guile:
** Add more data types and Scheme bindings for useful functions.
** Define Scheme "port"s for the gnubg output() functions.
** Use Guile keywords in cube-info.  Add similar functions for eval
  contexts and rollout contexts.
** Add Guile functions to access and modify the current game state.
** Add whatever Guile functions are necessary for implementing Cam Trenor's
  suggestion (generating random positions which are initial doubles). (gary)
** What happens if a Guile function sets up a catch handler and executes a
  gnubg command which evaluates another Guile function which throws an
  exception?  We probably want to evaluate each Guile expression in its own
  dynamic root.
** Add an option for Guile players (i.e. chequer and cube decisions are
  passes to a Guile function).
** There are several possible REPLs to choose from:
*** top-repl from (ice-9 boot-9).  Unfortunately this does not handle X
  events while in the REPL.
*** top-repl with the readline ports in (ice-9 readline).  This does handle
  X events, but its readline state and ours get completely confused.
*** gtk-repl from (gtk repl).  This handles X events and works for a while,
  but as soon as NextTurnNotify runs, gnubg and the REPL start fighting over
  the terminal.
*** guile-gui, which uses (gui event-loop) etc.  This sets up a REPL in its
  own window which seems to work, but if it is called from a `:' escape
  then the terminal is broken, because the call to Guile has not yet returned
  and so GTKDisallowStdin() is still in effect.  If executed independently
  (e.g. from a menu callback), then things generally seem to work.

* TTY interface:
** Handle "list game" and "list match".  (oysteijo)
** Allow setting/editing commentary.
** Show take/drop analysis.
** Make DumpStatcontext work for money sessions.

* X interface:
** Does anybody still use the old Xlib (Ext) interface any more?  If so,
  perhaps they are interested in maintaining it.  If not, maybe it should
  be deprecated and eventually removed (all the recent GUI effort has
  concentrated on the GTK interface anyway).

* GTK interface:
** Allow copy/paste and drag & drop of the board ID in the board window.
** Add a prompt and entry field to allow commands to be entered (replacing
  stdin).
** Allow the user to decide whether short messages appear in dialogs
  instead of the status bar, or whether all messages are appended to a
  message window.
** Disable the "stop" button when nothing is happening.
** Add option to exchange the dice after a single click move has been
  made.
** Make sure we apply GTK styles correctly: create a GtkRcStyle; set the
  background colour in the style and the flag indicating the background is
  set; call gtk_widget_modify_style; unref the style.  This makes sure the
  style will survive across theme changes.
** Make usage() show the GDK and GTK options, if appropriate.
** Show a preview of the chequers in the appearances dialog.
** Allow the cube and dice pip colours and the border specular/shiny
  parameters to be changed.
** Use a file selection widget for the socket in the player dialog.
** Would ShowList() look better if it used a text widget?  (Wait for
  GTK+ 2.0.)
** During a rollout, the OK button should be the grab widget.  Can we
  fix that by temporarily modifying pwGrab?  (Or maybe we should allow
  the entire rollout dialog to be active, for copy/paste.)
** Enable and disable the take/drop/redouble/agree/decline etc. buttons
  and menu items when appropriate.
** Make some of the information below the board optional (suggested by Jeremie 
  Petit).  This might be possible with a vertical pane widget, but it would
  be nice if there was a way to forbid children from being given _more_ than
  their requested size.  This might require a subclass which overrides
  gtk_vpaned_motion and sets paned->min_position.
** Optionally merge the game record and annotation windows into one big
  paned window (suggested by Jeremie Petit).
** Use different styles for moves in the game window, depending on the
  annotation.
** When a long string is displayed in the status bar, the main window
  grows to accomodate it -- not very pretty.  A Layout or Viewport widget
  might be able to fix this.
** Make GTKDumpStatcontext check psc->fMoves, psc->fDice and psc->fCube,
  and only output the relevant statistics.
** Update the GTK+ SetEval(), SetPlayers() and SetRollouts() to match
  the new evalsetups. (gary)
** Make sure copy/paste works correctly everywhere.  See
  <http://www.freedesktop.org/standards/clipboards.txt>.  (Wait for GTK+ 2.0.)
** Think about ways to improve event handling while "busy".  We could save
  them somewhere and then use gdk_event_put() when we're ready. (gary)
** CreateDialog() should use GTK+ 2.0 stock icons instead of the gnu. (gary)
** The edges of the board should cast shadows.  Getting shadows on the
  board surface is fairly easy... getting shadows on the chequers is not.

** Dialogs:
*** Add buttons to the "help" window to look up the command in the manual,
  or execute it.
*** Allow selection of data from the rollout dialog (see the hint dialog for
  an example). (gary)
*** Make the rollout dialog look more like the hint dialog. (gary)
*** Allow copy/paste from the "hint" cube output and statistics dialogs.

** Deprecated functions:
  Once GTK+ 2.0 is released, remove references to the following deprecated
functions:
*** gdk_style_get_font
*** gdk_style_set_font
*** gdk_image_new_bitmap
*** GtkText

* Bugs:
** The erroneous commands "set player both" and "set player both evaluation"
  give poor error messages.  szSetCommand is not always set correctly, which
  leads to other bad errors (e.g. "set player 0 cubedecision rollout").
** "help load sfdkljsdlf" gives a poor error message.
** Check that calls to GTKUpdateAnnotations() are made where necessary
  (e.g. the "annotate" commands probably should, and "set output ...").
** The SGF loading (saving?) routines and CommandLoadCommands use
  stdio, which restarts system calls on signals.  This means TTY interrupts
  and the GTK `stop' button don't work. (gary)
** The "stop" button (i.e. the grab widget) automatically removes the
  grab on itself when it gets a "button release".  It would be more
  robust to add a parent to it (box or event box?), and give _that_
  the grab.  Unfortunately, grab add/remove calls must nest, and we
  can't guarantee that...  Another possible workaround would be to
  set the grab immediately before gtk_main_iteration(); we currently
  do this in GTKDelay() but only once for the loop in HandleXAction().
  Perhaps we should do it everywhere we call gtk_main_iteration()? (gary)
** There's no way to see the annotation on the opening move using the
  TTY interface.  Changing ShowBoard() to display the starting position
  and then the annotation might work.
** The SGF lexer and parser are robust against illegal input, but the
  game reading functions in sgf.c are very fragile.  They need to be
  fixed to detect invalid saved games.
** CommandCopy() should complain (or copy a board initialised to the
  starting position) if no game is being played.
** Problems importing JF positions (see David's e-mail).
   (Update: untested bugfix commited)
** If "set turn" has been used during a game (so a player has two
  consecutive moves), then export to .mat format saves it incorrectly.
** Analysis with rollouts crashes under GTK.  (There are problems with the
  rollout window -- do we really want a window in this case?)
** We only allow the player on roll to resign.  But the other player can
  resign in imported FIBS (and JF?) games... this can show the wrong player
  resigning when using the TTY interface.  We also need to calculate how
  many points a resignation was for.  See Little_Sister match
  990429083514-MattiT-1985-5468-13-bgbored-25-5.txt (game 2) for an example
  of both problems.
** "help next" (and "next <tab>") are incomplete.
** ShowManual() should look in the directory given with -d.
** GtkTexi should try to load images from the same directory as the XML file.
** GTK+ 2.0 wants strings in UTF-8.  Unfortunately SGF files are specified
  to be ISO 8859-1, and the terminal is locale-dependent. (gary)
** Should InitMatchEquity() look in PKGDATADIR and/or PKGDATADIR/met/ as well
  as . (and even ./met/) if given a relative file name?

* Documentation:
** Complete the Texinfo manual.  Perhaps for now, only things that are
  unlikely to change should be documented.
** The GNU coding standards say: "Don't just tell the reader what each
  feature can do -- say what jobs it is good for, and show how to use it for
  those jobs.  Explain what is recommended usage, and what kinds of usage
  users should avoid."

* Miscellaneous:
** Add internationalisation (gettext).
** Add more to http://www.gnu.org/software/gnubg/... -- perhaps pages to
  submit training data, an online evaluator like Monte Carlo, maybe even an
  entire game like Motif.
** Submit something to <http://www.distributed.net/nextgen/projects.html>.
** Allow loading and saving weights to specify binary or ASCII format (perhaps
  load and save use binary, import and export use ASCII).
** Think about generating huge databases for CD-ROMs (we can get 1-sided
  databases for all chequers up to the 11 point, or 2-sided databases where
  both players have up to 11 chequers in the home board onto a CD-ROM).
** Add optional time rules, for tournament play when clocks are used.
** Add more optional feature tests to "make check" -- databases, X?
** Add import/export tests.
** Change the fConfirm ("are you sure you want to abort the game in
  progress") checks so that they _do_ ask when the game is over but the
  match is still in progress, and they _don't_ ask if a game has not been
  modified since it was last loaded/saved.
** Handle SGF variations.
** Allow loading/saving of compressed games/matches with zlib.
** Make the external player handle resignation decisions.
** Allow an option for illegal moves to be entered.
** Allow ~ and $ escapes in filenames (use wordexp()).
** Allow printing positions/games/matches/etc.  (More or less the same
  as exporting to PostScript, but piped to a printing process.) (gary)
** Keep statistics of won/lost games/matches.
** Make sure the Nackgammon option works properly: record when loading/saving,
  make sure that InitBoard during analysis gets it right, etc.  Similarly
  for Egyptian and Jacoby.
** If a MOVE_NORMAL is marked bad, it's not clear whether that means a
  bad move, or a costly missed double.
** Consider some kind of interface for recording live matches as quickly
  as possible.
** $HOME might not exist on non-POSIX settings.  What are better alternatives
  for finding a place to save per-user settings?
** Think about adding features which attempt to predict the time and
  standard error of rollouts in advance (see Chuck's work). (gary)
** Allow very large (128 bit+) seeds. (gary)
** Allow the caller of the Rollout* functions to specify a callback function
  (to replace the current hard-coded GTKRollout()/output* calls).
** CommandSetRolloutRNG() in set.c needs to be finished. (gary)
** Add an option to swap the players or flip the board vertically
  (suggested by Peter Sochovsky).
** Consider making a move selection in the annotation window update the
  chequers to show that move (suggested by Peter Sochovsky).
** Investigate more sophisticated training techniques, e.g. real
  simulated annealing (see the GNU Scientific Library, at
  <http://sources.redhat.com/gsl/>).
** It looks as if the interface to expat is close enough to libxml2's
  (they both approximate SAX) that we could write a wrapper to make use
  of whichever library is available.  We could even include a bare-bones
  XML parser to fall back to in case neither are present.

* Obselete or problematic ideas (probably better not to implement these):
** Save partial input when TTY input is overwritten by an X command.
  The best way would be to unify what GetInput does and ProcessInput,
  with push/pop semantics for readline state.
** Nothing handles running out of memory gracefully.  A solution
  could be to write a malloc() wrapper that (if malloc fails) first
  tries to free memory (e.g. flush the eval cache); if malloc still
  doesn't succeed, then print an error message and longjmp() to the
  main loop.  When using the GNU C library, __malloc_hook can be used
  too (so we can intercept calls coming from Xlib, for instance).  We
  shouldn't longjmp() out of the hook, though (it might confuse library
  functions).
** When using mmap()ed bearoff databases, add a signal handler for
  SIGBUS/SIGSEGV to trap I/O errors.  Unfortunately, the semantics of
  errors on mmap()ed regions are the most unportable that can be imagined...


Local Variables:
mode: outline
End:
