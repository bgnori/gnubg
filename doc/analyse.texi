@menu
* Evaluating a position::
* Evaluating a cube decision::
* Rollout of moves::
* Rollout of cube decisions::
* Analysing a saved game or match or session::
* Output of an analysis::
* Equities::
@end menu

@node Evaluating a position
@section Evaluating a position

@node Evaluating a cube decision
@section Evaluating a cube decision

@node Rollout of moves
@section Rollout of moves


@node Rollout of cube decisions
@section Rollout of cube decisions

@subsection Quasi-Random Dice

Quasi-Random Dice are used to reduce the element of luck in
rollouts. Instead of selecting purely random dice, @gnubg{} will
ensure a uniform distribution of the first roll of the rollout.  If 36
trials is requested, one game will start with 11, two games with 21,
two games with 31, etc. In general, if n * 36 games is requested, n
games will start with 11, 2*n games with 21 etc. This is called
@emph{rotation} of the first roll. Similarly, if n*1296 trials is
requested, the second roll will be rotated, such that n games will
start with 11-11, 2*n games with 11-21, 4*n games with 21-21, etc. The
third roll be also be rotated if the number of trials is proportional
to 46656. 

Suppose a user stops a 1296 trial rollout after 36 games. The 36 games
would have had the following rolls for the first two rolls of each
game: 11-11, 21-11, 12-11, 31-11, 13-11, ..., 66-11 Obviously such a
rollout will give skewed results since the second roll was 11 for all
games! To avoid this problem @gnubg{} will randomise the sequence of
rolls such that it is guaranteed that for any sample of 36 games you
have exactly one game with first roll 11, exactly one game with
second roll 11, etc. This is called @emph{stratification}.

@gnubg{} will actually also rotate and stratify rollouts where the
number of trials are not multiples of 36, 1296, etc. The distribution of
rolls is obviously not uniform any longer in this case, but it will
still provide some reduction of the luck, i.e., no 37 trial rollout
will have 3 games with a initial 66. 

Before the first game of a rollout, @gnubg{} creates a psuedo random
array which it will use for all the games in the rollout. In effect it
has already decided the roll sequence it will use for up to 128 rolls
in every game of the rollout. In other words, for a normal rollout
where games don't go over 64 moves, every single game of every
possible rollout length has already had its dice sequence
determined. During the rollout of game n, sequence n will be used, for
game n+1 sequence n+1, etc. If it's a @emph{rollout as initial
position}, then whenever the current sequence starts with a double,
the sequence is skipped and the dice routine moves on to the next
sequence. Say an @emph{rollout as initial position} is about to start
using sequence 275, but that sequence begins with a double. The dice
routine moves to sequence 276. On the following game, it will use
sequence 277 (it remembers how many it has already skipped). 

So, if you select @emph{rollout as initial position} and 36 games,
then you will get a prefect set of rolls for games 1..30 and the first
6 rolls of the next perfect set (the same rolls you would have gotton
for games 31..36 if you'd asked for 1080 games or 10800 games or 92
games or whatever. 

The dice sequence doesn't know how man trials it will be asked for, it
simply generates sequences such that for a normal rollout
(@emph{rollout as initial position}) every 36 (30) games you get all
possible 1st rolls, every 1296 (1080) games get every possible first 2
rolls, every 46656 (38880) games you get full sets of 3 rolls, etc.






@node Analysing a saved game or match or session
@section Analysing a saved game or match or session

@gnubg{} allows 

@node Output of an analysis
@section Output of an analysis

@subsection Chequer play analysis

@subsection Cube decision analysis

@subsection Game, match, or session statistics

You can get a summary of the analysis from the game, match, or
session analysis. The game analysis is a summary for the current game
whereas the match or session statistics is a summary of all the games
in the match or session. The match analysis is available in the GUI from
@code{Analysis->Match Statistics} or at the botton of exported files.

@subsubsection Chequer play statistics

This section provides a summary of the chequer play statistics. The
following information is available

@itemize @bullet
@item @strong{ Total moves          }:
The total number of moves in the match.
@item @strong{ Unforced moves       }:
The number of unforced moves, i.e., all chequer play decisions
which had more than one legal move. 
@item @strong{ Moves marked xxx}:
The number of moves marked @emph{very good}, @emph{very bad}
etc. The analysis will mark moves @emph{very bad}, @emph{bad}
etc. based on the threshold you've defined in the analysis
settings. @gnubg{} can currently not automatically mark moves, e.g.,
@emph{good}, but you can mark moves @emph{good} yourself.
@item @strong{ Error rate (total)}:
The first number is the total amount of normalised equity that
the player gave up during this game or match. The number in
parenthesis is the un-normalised counterpart; for money play the
all errors are multiplied with the value of the cube, and for match play
the total match winning chance given up by the player is reported. 
@item @strong{ Error rate (per move)}:
The error rate per move is the total error rate divided by the number of
@emph{unforced moves}. Note that is different from Snowie 4 that
defines the error rate per move as the total error rate divided by the
total number of moves for both players, i.e., the sum of @emph{total
moves} for both players. In general, your
error rate per move will be lower in Snowie than in @gnubg{}. 
@item @strong{ Chequer play rating}:
@gnubg{} will assign a rating for your chequer play ranging from
@emph{Awful!} to @emph{Supernatural}. See the description for the
@emph{overall rating} below.
@end itemize


@subsubsection Luck analysis

This section provides information about how Ms. Fortuna distributed
her luck. The following information is available:

@itemize @bullet
@item @strong{ Rolls marked xxx}:
The number of moves marked @emph{very lucky}, @emph{lucky}
etc. Moves marked @emph{very lucky} are huge jokers that improve your
equity with more the +0.6 relative to the average equity. @gnubg{}
normally uses cubeful 0-ply evaluations to calculate the luck, but you
can change that under the analysis settings. See below for a complete
overview of what is considered @emph{very lucky}, @emph{lucky},etc.
@item @strong{ Luck rate (total)}:
The total luck for this game or match reported both normalised
and unnormalised. 
@item @strong{ Luck rate (per move)}:
The luck rate per move reported both normalised and unnormalised.
@item @strong{ Luck rating}:
Based on the luck rate per move @gnubg{} will assign you a
humerous luck rating. See below for the possible ratings.
@end itemize

Thresholds for marking of rolls:

@multitable @columnfractions 0.4 0.4
@item @strong{Deviation of equity from average}
@tab @strong{Roll is marked}
@item >0.6         @tab @emph{very lucky}
@item 0.3 - 0.6    @tab @emph{lucky}
@item -0.3 - 0.3   @tab unmarked
@item -0.6 - -0.3  @tab @emph{unlucky}
@item < -0.6       @tab @emph{very unlucky}
@end multitable

Luck ratings:

@multitable @columnfractions 0.4 0.4
@item @strong{Normalised luck rate per move} 
@tab @strong{Luck rating}
@item > 0.10         @tab Cheater :-)
@item 0.06 - 0.10    @tab Go to Las Vegas immediately
@item 0.02 - 0.06    @tab Good dice, man! 
@item -0.02 - 0.02   @tab none
@item -0.06 - -0.02  @tab Better luck next time
@item -0.06 - -0.10  @tab Go to bed
@item < -0.10        @tab Haaa-haaa
@end multitable


@subsubsection Cube statistics

This section provides a summary of the cube decision statistics: the
number of cube decisions, missed doubles, etc.

@itemize @bullet
@item @strong{ Total cube decisions}:
The total number of cube decisions, i.e., the sum of no-doubles,
doubles, takes, and passes. 
@item @strong{ Close or actual cube decisions}:
Similar to ``Total cube decisions'', except that no-doubles are
only included if they're considered ``close''. @gnubg{} considers a
cube decision close if the relavant equities are within 0.25 from
eachother or if the position is too good. 
@item @strong{ Doubles, Takes, Passes}:
The total number of doubles, takes, and passes in the game or
match.
@item @strong{ Missed doubles around DP, Missed doubles around TG}:
The number of missed doubles around the double point and too good
point respectively. If the
equity is below 0.95 the position is considered to be around the
double point else it considered to be around the too good point. If
you miss doubles around the double point, it usually means that you
double to late, whereas missed doubles around the too good point means
that you're too greedy and play on for gammon when the position is
@emph{not} too good.
@item @strong{ Wrong doubles around DP, Wrong doubles around TG}:
The number of wrong doubles around the double point and too good
point, respectively. If you have missed doubles around the double
point that generally means that you double too early where you really
should hold the cube, whereas missed doubles around the too good point
means that you double positions where you really should play on for a
gammon or backgammon.
@item @strong{ Wrong takes, Wrong passes}:
The total number of wrong takes and passes, respectively.
@item @strong{ Error rate (total)}:
The accumulated cube errors for this game or match reported both
normalised and unnormalised. 
@item @strong{ Error rate (per cube decision)}:
The error rate per cube decision is the total error rate divided
by the number of @emph{close or actual cube decisions}. 
Note that is different from Snowie 4 that
defines the error rate per cube decision as the total error rate divided by the
total number of moves for both players. In general, your
error rate per cube decision will be lower in Snowie than in @gnubg{}. 
@item @strong{ Cube decision rating}:
@gnubg{} will assign a rating for your cube decisions ranging from
@emph{Awful!} to @emph{Supernatural}. See the description for the
@emph{overall rating} below.
@end itemize


@subsubsection Overall rating

The last section is the overall summary.

@itemize @bullet
@item @strong{Error rate (total)}:
The accumulated chequer play and cube decision errors reported by
normalised and unnormalised.
@item @strong{Error rate (per decision)}:
The error rate per decision is the total error rate divided
by the number of non-trivial decisions (i.e., the sum of @emph{unforced
moves} and @emph{close or actual cube decisions}). 
Again, please note that is different from Snowie 4 that
defines the error rate per decision as the total error rate divided by the
total number of moves for both players. In general, your
error rate per move will be lower in Snowie than in @gnubg{}. 
An investigation of approximately 300 matches showed the on average
the @gnubg{} error rate with be 1.4 times higher than your Snowie 4
error rate. 
@item @strong{Equivalent Snowie error rate}:
For easy comparison @gnubg{} will also print the total error rate
calculated by the same formulae as Snowie 4. 
@item @strong{Overall rating}:
Based on your normalised error rate per move @gnubg{} will assign
you a rating ranging from @emph{Awful!} to @emph{Supernatural}. See
the table below for the thresholds.
@item @strong{Actual result}:
The actual result of the game or match. For money game this is simply the
number of points won or lost during the game or match. For match play
the number is calculated as 50% added to the result of the game or
match in MWC. For example, losing a match or winning a match
corresponds to an actual result of 0% and 100%, respectively. Winning
1 point in the first game of 7 point match is worth 6% using Kit
Woolsey's match equity table, hence the actual result is 56%. 
@item @strong{Luck adjusted result}:
The luck adjusted result is calculated as the @emph{actual result}
plus the total unnormalised luck rate. This is also called ``variance
reduction of skill'' as described in Douglas Zare's excellent article
@uref{http://math.columbia.edu/~zare/vrskill.html,Hedging Toward
Skill}. This should give an unbiased measure of the strengths of the
players. 
@item @strong{MWC against current opponent}:
For match play @gnubg{} will calculate your MWC
against the current opponent. The number is calculated as 50% - your
total unnormaluised error rate + your opponent's total unnormalised
error rate. If your opponent is really lucky but plays rather bad, this
number can become larger than 100%, since he due to the extra luck has
the possibily to give up even more MWC. However, @gnubg{} will
report this number as 100%, and 0% for the opposite situation. Note
that this number is biased towards the analysing bot, e.g., a 0-ply
analysis a game between @gnubg{} 2-ply and 0-ply will suggest that
0-ply is a favourite, which it is clearly not. For an unbiased measure
use the @emph{luck adjusted result} above.
@item @strong{Guestimated abs. rating}:
writeme
@end itemize

Threshold for ratings:

@multitable @columnfractions 0.4 0.4
@item @strong{Normalised total error rate per move} 
@tab @strong{Rating}
@item 0.000 - 0.002   @tab Supernatural
@item 0.002 - 0.005   @tab World Class
@item 0.005 - 0.008   @tab Expert
@item 0.008 - 0.012   @tab Advanced
@item 0.012 - 0.018   @tab Intermediate
@item 0.018 - 0.026   @tab Casual Player
@item 0.026 - 0.035   @tab Beginner
@item > 0.035         @tab Awful!
@end multitable



@node Equities
@section Equities

@subsection Introduction

@gnubg{} works with many different kinds of equities. The equity is
defined as the expected value of the position. However, this value can
be expressed in several different metrics and may be calculated with
or without taking the effect of the cube into consideration. In the
following section we will describe the equities used and calculated by
@gnubg{}.

@subsection Money equity

This is the value of the position in money game, e.g., if you equity
is +0.4 an you are playing money game with a $1 stake, you will win
$0.40 on average. The money equity can be calculated with or without
taking the effect of the doubling cube into consideration, or
@emph{cubeful} or @emph{cubeless}. The cubeless equity can be
calculated from the basic formulae:
2*p(w)-1+2(p(wg)-p(lg))+3(p(wbg)-p(lbg)). Evaluating the cubeful equity
is much more difficult; it can either be estimated from the cubeless
equitity by using transformations as outlined by Rick Janowski or by
constructing a neural net that 
directly outputs cubeful equities. @gnubg{} uses the former approach
(see chapter @ref{Cubeful equities}).

@subsection Match Winning Chance

In match play we're generally not particular interested in the outcome
of the individual games as much as the outcome of the entire match, so
the interesting quantity for match play is @emph{match winning chance}
(MWC). As for the money equity the MWC can be calculated with and
without the effect of the doubling cube. The MWCs are generally
calculated with the use of a match equity table, which contains the
chance of winning the match @emph{before} a game starts, e.g., if the
score is 0-0 in a 1pt match each player has 50% chance of winning the
match before the game starts assuming they're of equal skill. 

The cubeless MWC is calculated as: MWC(cubeless) = p(w) * MWC(w) +
p(l) * MWC(l) + p(wg) * MWC(wg) + p(lg) * MWC(lg) + p(wbg) * MWC(wbg)
* p(lbg) * MWC(lbg). 

For example, if the w/g/bg distribution is 0 30 60 - 40 10 0 and the
match score is 1-3 to 5 with the cube on 2 the cubeless MWC is:

MWC(cubeless)= 30% * 50% + 30% * 0% + 30% * 100% + 10% * 0% + 0% *
100% + 0% * 0% = 45%,

so the cubeless MWC is 45%. 

Evaluating the cubeful MWC is more difficult, and as for the cubeful
money equity it's possible to estimate cubeful MWCs from
transformation on the w/g/bg distribution or directly calculate it
from neural nets. @gnubg{} uses the former approach, but the formulae
are currently not published.

@subsection Normalised equity

It's generally very difficult to compare MWCs. For example, it's
hardly worth mentioning a 0.5% MWC error at DMP where as it's a huge
error at 0-0 to 7. It is therefore of interesting to normalise the
MWCs to some common scale. The most often used normalisation is
Normalised Money Game Equity (NEMG) where the MWC for any game is
transformed into the same interval as money game, i.e., -3 to +3 (due
to anomalies at certain match scores the NEMG can go below -3 and
above +3). The transformation is linear: 

NEMG = 2 * (MWC-MWC(l))/(MWC(w)-MWC(l)) - 1 

In other words, extrapolation with the following two extrapolation
points: (MWC(w),+1) and (MWC(l),-1).

For example, suppose the score is 3-1 to 5 with the cube on 2:
MWC(l)=0% and MWC(w)=50%:

@multitable @columnfractions 0.33 0.33
@item @strong{MWC} @tab @strong{NEMG}
@item 0% @tab -1
@item 25% @tab 0
@item 50% @tab +1
@item 75% @tab +2
@item 100% @tab +3
@end multitable 

Note that a w/g/bg distribution of 0 100 100 - 0 0 0 gives a NEMG of
+3 whereas the corresponding money equity is only +2. This is because
the gammon price is high for that particular score. When both players
are far from winning the match, e.g., 0-0 to 17 or 1-0 to 17, NEMG is
very close to the ususal money equity.

NEMG can be calculated from both cubeless and cubeful MWCs. 

A word of caution: A cubeless NEMG calculated from a cubeless MWC
could be named ``cubeless equity'', but in most backgammon litterature
this term seems to be reserved for the cubeless money equity. 

