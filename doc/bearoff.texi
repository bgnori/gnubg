
@node Bearoff databases
@chapter bearoff databases

This section describes what kind of bearoff databases you can use with
@gnubg{} as well as how you may obtain these.

@menu
* Introduction to bearoff databases::
* bearoff databases with GNU Backgammon::
* Obtaining bearoff databases::
@end menu

@node Introduction to bearoff databases
@section Introduction to bearoff databases

There are two kind of bearoff databases: two-sided (exact) bearoff databases
or one-sided (approximative) bearoff databases. 

@subsection Two-sided bearoff databases

Two-sided bearoff databases contain exact probabilities or equities
for winning. 

For example, for less than 6 chequers inside the home quadrant, each
side has 924 different positions, for a total of 924 * 924 = 853,776
positions possible. The bearoff database will contain the exact
winning probability for each of these 853,776 positions. Typically,
the database also includes cubeful equities for money game. Cubeful
equities for match play is generally not included as it is dependent
on match score and cube level. 

Consider the following position:

@verbatim
 GNU Backgammon  Position ID: CgAAEAEAAAAAAA
                 Match ID   : cIkMAAAAAAAA
 +13-14-15-16-17-18------19-20-21-22-23-24-+     O: gnubg
 |                  |   |          O  O    | OOO 0 points
 |                  |   |                  | OOO
 |                  |   |                  | OOO
 |                  |   |                  | OO
 |                  |   |                  | OO
v|                  |BAR|                  |     (Cube: 1)
 |                  |   |                  | XX
 |                  |   |                  | XX
 |                  |   |                  | XXX
 |                  |   |                  | XXX On Roll
 |                  |   |    X        X    | XXX 0 points
 +12-11-10--9--8--7-------6--5--4--3--2--1-+     X: jth
@end verbatim

Using a two-sided bearoff database will yield that player X has 67.1%
cubeless chance of winning. The database also gives cubeful money
equities of +0.3441, +0.3210, and +0.1605 for X owning cube, centered
cube, and O owning cube, respectively. So it's an initial 
double since +0.3210 >= 2 * +0.1605. However it's not a redouble since
+0.3441 >= 2 * 0.1605. 

The major problem with two-sided databases is that the size increases
incredible fast with the number of points and chequers:

@multitable @columnfractions 0.25 0.25 0.25
@item @strong{Chequers}  
@tab @strong{Points}   
@tab @strong{Number of positions}
@item 6         @tab 6        @tab 853,776
@item 7         @tab 6        @tab 2,944,656
@item 8         @tab 6        @tab 9,018,009
@item ...
@item 15        @tab 6        @tab 2,944,581,696
@item ...
@item 15        @tab 24       @tab 18,528,584,051,601,162,496
@end multitable

@gnubg{} stores the equity for each position with a precision of
approximately 0.00003 which requires 2 bytes of storage. Hence,
storing one cubeless and three cubeful equities requires a total of 8
bytes per position. This gives the following storage requirements for
n chequers inside the home quadrant:

@multitable @columnfractions 0.2 0.2 0.2 0.2
@item @strong{Chequers}  
@tab @strong{Points}   
@tab @strong{Number of positions}
@tab @strong{Size/MB}
@item 6         @tab 6        @tab 853,776        @tab 6 
@item 7         @tab 6        @tab 2,944,656      @tab 22 
@item 8         @tab 6        @tab 9,018,009      @tab 68
@item 9         @tab 6        @tab 25,050,025     @tab 191
@item 10        @tab 6        @tab 64,128,064     @tab 489
@item 11        @tab 6        @tab 153,165,376    @tab 1,168
@item 12        @tab 6        @tab 344,622,096    @tab 2,629
@item 13        @tab 6        @tab 736,145,424    @tab 5,616
@item 14        @tab 6        @tab 1,502,337,600  @tab 11,461
@item 15        @tab 6        @tab 2,944,581,696  @tab 22,465
@end multitable

For the typical user the limit is probably 10 or 11 chequers unless
she owns vast amounts of disk space.
Also, the time to generate these databases increases
proportionally with the size. The 15 chequer database takes at least
3,500 times the time it takes to generate the 6 point database. For
example, on the author's 1GHz Pentium III it takes approximately 6
minutes to generate the 6 
points database, hence it would take at least 21,000 minutes or
approximately 15 days to generate the 15 point database on the same computer.

@subsection One-sided bearoff databases

Instead of looking at both player's positions simultaneously large
savings can be obtained by looking at each side independently. For
each position we tabulate the probability P(n) what the player will
bear all chequers off in n rolls; P(n) is the one sided bearoff
distribution. Assume player 0 and player 1 has one sided bearoff
distributions P0(n) and P1(n), respectively. The chance of player 0
bearing all chequers off before player 1 is:

@tex
$$ p = \sum_{i=0}^{\infty} P_0(i) \left( \sum_{j=i}^{\infty} P_1(j) $$
\right) $$
@end tex
@ifnottex
p = sum(i=0 to infinity) P0(i) [ sum(j=i to infinity) P1(j) ]
@end ifnottex

For example, consider the following position:

@verbatim
 GNU Backgammon  Position ID: 2x0AAOi2AQAAAA
                 Match ID   : cAkAAAAAAAAA
 +13-14-15-16-17-18------19-20-21-22-23-24-+     O: gnubg
 |                  |   |       O  O  O  O | O   0 points
 |                  |   |       O  O  O  O | O
 |                  |   |       O  O       | O
 |                  |   |                  | O
 |                  |   |                  | O
v|                  |BAR|                  |     (Cube: 1)
 |                  |   |                  | X
 |                  |   |                  | X
 |                  |   |             X    | X
 |                  |   |    X  X  X  X    | X   On roll
 |                  |   |    X  X  X  X  X | X   0 points
 +12-11-10--9--8--7-------6--5--4--3--2--1-+     X: jth
@end verbatim

The one sided bearoff distributions are
@multitable @columnfractions 0.25 0.25 0.25
@item @strong{Rolls} @tab @strong{jth} @tab @strong{gnubg}
@item 3 @tab  1.917% @tab  2.811%
@item 4 @tab 18.749% @tab 28.403%
@item 5 @tab 44.271% @tab 50.307%
@item 6 @tab 32.998% @tab 18.114%
@item 7 @tab  2.029% @tab  0.363%
@item 8 @tab  0.037% @tab  0.002%
@end multitable

Applying the formula above gives:

@math{1.917% * 100% + 18.749% * 97.189% + 44.271% * 68.786% ... +
0.037% * 0.02% = 56.7%}

The cubeless gwc's calculated from one sided bearoff distributions are
usually quite good, although no thorough investigations have been
performed so far. Although the databases are one sided they can also
give correct moves in ``desperation'' scenarios.

By storing the probability to bearoff at least one chequer, it's also
possible to calculate gammon probabilities, as the chance of being
gammoned is the probability that my opponent bears all chequers off
before I bear at least one chequer off. Analogously, it's possible to
calculate the chance of gammoning the opponent.

The storage requirements are much smaller than for the equivalent two
sided databases.

@multitable @columnfractions 0.25 0.25 0.25
@item @strong{Chequers}  
@tab @strong{Points}   
@tab @strong{Number of positions}
@item 15        @tab 6        @tab 54,264
@item 15        @tab 7        @tab 170,544
@item 15        @tab 8        @tab 490,314
@item 15        @tab 9        @tab 1,307,504
@item 15        @tab 10       @tab 3,268,870
@item 15        @tab 11       @tab 7,726,160
@item 15        @tab 12       @tab 17,383,860
@item 15        @tab 13       @tab 37,442,160
@item 15        @tab 14       @tab 77,558,760
@item 15        @tab 15       @tab 155,117,250       
@item 15        @tab 16       @tab 300,540,195
@item 15        @tab 17       @tab 565,722,720
@item 15        @tab 18       @tab 1,037,158,320
@end multitable

For example, 15 chequers on 6 points is only 54,264 positions for the
one sided bearoff database compared to 294,458,696 positions for the
equivalent two sided bearoff database. However, for each position we
need to store an array of probabilities. For example, for 15 chequers
on the 18 point we have to store 15 non-zero probabilities compared to
only one in the two sided bearoff database. The table below gives
approximate database sizes for @gnubg{}'s one sided databases (both
bearoff and gammon distributions):

@multitable @columnfractions 0.25 0.25 0.25
@item @strong{Chequers}  
@tab @strong{Points}   
@tab @strong{Approximate size in MB}
@item 15        @tab 6        @tab 1.5
@item 15        @tab 7        @tab 5
@item 15        @tab 8        @tab 15
@item 15        @tab 9        @tab 44
@item 15        @tab 10       @tab 120
@item 15        @tab 11       @tab 250
@item 15        @tab 12       @tab 560
@item 15        @tab 13       @tab 1,200
@item 15        @tab 14       @tab 2,500
@item 15        @tab 15       @tab 5,000
@item 15        @tab 16       @tab 10,000
@item 15        @tab 17       @tab 18,000
@item 15        @tab 18       @tab 32,000
@end multitable

So, the practical limit is probably around the 11 to 13 point,
depending on the disk space available.

@gnubg{} can generate one sided bearoff database where the exact
bearoff distribution is approximated by a normal distribution: instead
of storing up to 15 or 20 non-zero probabilities only two parameters
characterising the normal distribution has to be stored: the mean and
the variance. The approximative distributions yields reasonably
accurate gwc's and gammon probabilities compared to the exact one
sided bearoff database. The size of the these approximative databases
are roughly a quarter of the exact one, hence the limit is around the
13 to 15 point depending on the disk space available. The option to
use approximative bearoff databases is work in progress!

As with the two sided bearoff databases it can be a rather time
consuming task to generate one sided databases. The 10 point database
takes approximately 2 hours to generate on the author's 1 GHz Pentium
III. The 12 point database may more than one day!

@node bearoff databases with GNU Backgammon
@section bearoff databases with GNU Backgammon

@gnubg{} works with both one sided and two sided bearoff
databases. Currently, it works with up to four databases; two of each
kind. Two of the databases are read into memory for fast access, but
of course these are limited to very small databases.

The one sided database kept in memory is built-in, since it must be
present as it's used for backgammon probabilities for the race net and
other various things. The size of the database is determined at
compile time. The standard is 15 chequers on 6 points, but you may
choose a larger one my modifying the @file{Makefile}.

The two sided database kept in memory (@file{gnubg_ts0.bd}) is
optional and you may generate or download your own (see next section
for details). 

The remaining two databases (@file{gnubg_os.bd} and
@file{gnubg_ts.bd}) are kept on disk and accessed when
needed. See next section for details on how to generate or download
your own.

@node Obtaining bearoff databases
@section Obtaining bearoff databases

@subsection Generate your own

@gnubg{} is supplied with a program @file{makebearoff} that is used to
generate bearoff databases. 

To generate one sided database issue

@example
makebearoff -o 10 > gnubg_os.bd
@end example

to generate the one sided 10 point database. The program
@file{makebearoff} uses a cache to store previously generated
positions. You may set the cache size with the @command{-s size}
option, e.g.,

@example
makebearoff -o 10 -s 123456789 > gnubg_os.bd
@end example

to use 123,456,789 bytes of memory for cache size. In general, if the
cache size is less than the size of the database to be generated, then
extra time is needed to generate the bearoff database because some
positions may have to be calculated several times.

@file{makebearoff} can also reuse previously generated databases, so
if you already had generated the 9 point database you can reuse it:

@example
mv gnubg_os.bd gnubg_os9.bd
makebearoff -o 10 -O gnubg_os9.bd > gnubg_os.bd
@end example

Note that @file{makebearoff} requires temporary disk space to generate
both one sided and two sided databases. In general, twice the disk
space of the database to be generated is needed. 


To generate a two sided database issue

@example
makebearoff -t 6x8 > gnubg_ts.bd
@end example

This example will generate the 8 chequers on 6 points database. Again,
it's possible to adjust the amount of memory with the @command{-s}
option. It's recommended to set the cache size to the maximum amount of memory
available (although there is no need to set it beyond the size of the
bearoff database to be generated).


Other options for @file{makebearoff} are available, see
@command{makebearoff --help} for the complete set.


At compile time the built-in one sided
bearoff database is generated with the command

@example
makebearoff -o 6 | makebearoff1 -o br1.c
@end example

which generated a 6 point one sided bearoff database. The database is
piped into makebearoff1 that generates the C code for the
database. The resulting @file{br1.c} is more than 8MB, so it's not
distributed with the source for @gnubg{}. 


@subsection Download

Currently, the only database available for download is the 6 chequers
on 6 points two sided database which can be downloaded from
@uref{ftp://alpha.gnu.org/gnu/gnubg/gnubg_ts0.bd.gz}.

Later, other databases may be available for download or it may be
possible to purchase these on CDROM or DVD for a nomial fee. 

