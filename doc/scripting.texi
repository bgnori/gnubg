@node Scripting
@chapter Scripting

@section Accessing @gnubg{} Python shell 

To access the Python shell, either type @samp{>} from the command line
or select @code{Windows->Python Shell(IDLE...)} from the GUI.

@section gnubg module functions

@table @code
@item board()
@item command(cmd)
@item evaluate()
@item evalcontext()
@item eq2mwc()
@item mwc2eq()
@item cubeinfo()
@item met()
@item positionid()
@item positionfromid()
@item positionkey()
@item positionfromkey()
@item positionbearoff()
@item positionfrombearoff()
@item navigate([next=@var{N},[game=@var{N}]])
Match navigation.

Without any arguments, go to first move of first match.

With next == @var{N}, move forward @var{N} game records.

With game == @var{N}, move forward/backward @var{N} games.

Navigate never wraps around.

On success, returns @code{None}. If unable to complete the requsted
number of moves, returns a pair of @code{(next-remaining,game-remaining)}.

@item match([analysis=1/0, boards=1/0, statistics=0/1, verbose=0/1])

Return the current @ref{match}. For example,

@example
> m = gnubg.match()
@end example

Takes the following optional keyword arguments:

@table @code
@item analysis
When 0, discard analysis data. default is 1.

@item boards
When 1, add current board to move/double records. Default is 1.

@item statistics
When 1, include game and match statistics. Default is 0.

@item verbose
When 1, include derived analysis values. Default is 0.
@end table
@end table

@anchor{match}
@subsection Match description 

@code{gnubg.match()} returns a dictionary containing the following
items:

@table @code
@item match-info
General match info. @ref{match-info}
@item games
A sequence, one elemet per game. @ref{game}
@item stats (optional)
Match statistics.
@end table

@anchor{match-info}
@subsubsection Match info
A dictionary containing the following items:

@table @code
@item match-length

@item variation
One of @code{Standard},@code{Nackgammon}, @code{Hypergammon1},
@code{Hypergammon2} or @code{Hypergammon3}.

@item rules (optional)
Additional rules used. A subset of @code{NoCube}, @code{Crawford} and
@code{Jacoby}.
  
@item X
@itemx O
Per player information. Each a dictionary containing @code{rating} and
@code{name}.
@item annotator (optional)
@item round (optional)
@item place (optional)
@item date (optional)
Sequence of (Day,Month,Year).
@item event (optional)
@item default-eval-context
Default evaluation context. A dictionary in the same format as
returned by @code{evalcontext()}.

@item default-rollout-context
Default rollout context. 
@end table

Example,
@example
>>> m['match-info']
@{'match-length': 25, 'rules': ('Crawford',), 'default-eval-context': @{'plies': 2, 'deterministic': 1, 'reduced': 0, 'noise': 0.0, 'cubeful': 1@}, 'annotator': 'GNU 0.14', 'O': @{'rating': '0 (Exp 0)', 'name': 'Moshe Tissona'@}, 'round': 'Final', 'place': 'Monte Carlo', 'variation': 'Standard', 'default-rollout-context': @{'n-truncation': 11, 'initial-position': 0, 'trials': 0, 'stop-on-std': 0, 'variance-reduction': 1, 'late-eval': 0, 'truncated-rollouts': 0, 'truncate-bearoff2': 1, 'cubeful': 1, 'truncate-bearoffOS': 1, 'seed': 1177750272, 'quasi-random-dice': 1, 'minimum-games': 144@}, 'date': (13, 7, 2003), 'X': @{'rating': '0 (Exp 0)', 'name': 'Jon Royset'@}, 'event': 'World Championship 2003'@}
@end example

@anchor{game}
@subsubsection Python game

A dictionary containing the following items:

@table @code
@item info
General game info. For example,
@example
>>> m['games'][0]['info']
@{'points-won': 1, 'score-X': 0, 'score-O': 0, 'winner': 'X', 'resigned': False@}
@end example

If no winner is specified, @code{winner} is @code{None}.

@example
>>> m['games'][2]['info']
@{'score-X': 2, 'winner': None, 'score-O': 0@}
@end example

@item game
A Sequence of actions. @ref{actions}

@item stats (optional)
Game statistics. Similar entries to @code{Analyse->Game statistics} from the
GUI. 
@end table


@anchor{actions}
@subsubsection Game actions

Each action is a dictionary



