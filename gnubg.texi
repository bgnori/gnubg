\input texinfo
@setfilename gnubg.info
@settitle GNU Backgammon
@include version.texi

@set month-year December, 1999

@syncodeindex vr cp

@macro gnubg
@t{gnubg}
@end macro

@ifinfo
This file documents GNU Backgammon, a program for playing and analysing
backgammon games and matches.

Copyright @copyright{} 1999 Gary Wong.
@end ifinfo

@titlepage
@sp 10
@title GNU Backgammon
@subtitle version @value{VERSION}
@subtitle @value{month-year}
@author Gary Wong
@end titlepage

@ifnottex
@node Top
@top GNU Backgammon

This manual describes how to use GNU Backgammon to play and analyse
backgammon games and matches.  It corresponds to version @value{VERSION}
(updated in @value{month-year}).

@menu
* Introduction::                  What GNU Backgammon does.
* How to Play Backgammon::        The rules of the game.
* Sample Game::                   An example of how to play against gnubg.
* Invocation::                    Starting and leaving gnubg.
* Basic Commands::                Fundamental operations in gnubg.
* Playing::                       gnubg's game playing features.
* Analysis::                      Using gnubg to evaluate positions.
* Databases::                     Storing information about positions.
* Training::                      Modifying gnubg's neural nets.
* Frequently Asked Questions::    Brief answers to things you might ask.
* Concept Index::                 Index of concepts described in this manual.
@end menu

@end ifnottex

@node Introduction
@chapter Introduction
@cindex introduction

GNU Backgammon (@gnubg{}) plays and analyses backgammon games and matches. 

It is currently a work-in-progress.  When it is finished, it will be able
to play and analyse cubeless and cubeful games and tournament matches,
evaluate and roll out positions, tune its own evaluation functions using
either TD or supervised training, maintain databases of positions for
training and other purposes, and more.

It will be extensible on platforms where Guile is available, so that the
user can program it to answer sophisticated questions like "How many
chequers must Black have borne off in positions like this one to be able
to accept a double?" and automate complicated rollout tasks.  It will be
driven by a command-line interface, and will display an ASCII rendition
of a board on text-only terminals, but will also allow the user to play
games and manipulate positions with an X11 board window where available.

It currently plays at about the level of a strong intermediate flight
tournament player (rated in the mid 1700s on @dfn{FIBS}, the First Internet
Backgammon Server --- around the 90th percentile) and is gradually
improving; it should be somewhat stronger than this when released.  Since
almost all of the CPU time required during supervised training is spent
performing rollouts, and rollouts can easily be performed in parallel,
it is hoped that users will be able to pool rollout results and
collectively train it to a level stronger than any individual could
obtain.

If you can tolerate the rough edges, periodic snapshots of @gnubg{} and
anonymous CVS access to the pre-release source are being made available.
You can also compete against a recent version of @gnubg{} on FIBS; it
plays there under the name @samp{gnu}.

FIXME update this section.

@node How to Play Backgammon
@chapter How to Play Backgammon
@cindex backgammon
@cindex rules of backgammon

If you already know how to play backgammon, you can skip this chapter --- it
describes the rules of the game only, and does not contain any information
specific to GNU Backgammon.

FIXME write this.  Perhaps Tom Keith will let us steal the rules from
his web site.

@node Sample Game
@chapter Sample Game
@cindex sample game

Although GNU Backgammon has many commands and options, only a few of them
are used during routine play.  This chapter demonstrates some of those
most commonly used.

If your @gnubg{} installation is complete, you should be able to start it
and get output similar to the following:

@example
GNU Backgammon 0.02  Copyright 1999 Gary Wong.
GNU Backgammon is free software, covered by the GNU General Public
License, and you are welcome to change it and/or distribute copies
of it under certain conditions.  Type "show copying" to see the
conditions.
There is absolutely no warranty for GNU Backgammon.  Type "show
warranty" for details.
(No game) 
@end example

When you start a game, @gnubg{} will (by default) show which player's move it
is; it is displaying @samp{(No game)} at the moment to indicate that it
isn't anybody's turn.

GNU Backgammon uses a pseudo-random number generator to produce dice
rolls.  It will normally initialise the state of the generator to
some value based on the current time (and perhaps other system information,
depending what features are available on your platform).  But for purposes
of this example, it will be better to start the generator from a known
state, so that the rolls it generates will be repeatable.  Enter the
following command to change the generator state (``seed''):

@example
(No game) set seed 15
Seed set to 15.
(No game)   
@end example

The default settings allow you to play X (the black pieces, if you have
a graphical board window) and the computer will play O (red).  It will
play with no lookahead by default; it is very fast at choosing moves
in this mode (instantaneous, on most hardware) though it does not play
at its full strength.  Let's start a game.

@example
(No game) new game
O rolls 1, X rolls 3.
@group
 GNU Backgammon  Position ID: 4HPwATDgc/ABMA
 +13-14-15-16-17-18------19-20-21-22-23-24-+     O
 | X           O    |   | O              X |     
 | X           O    |   | O              X |     
 | X           O    |   | O                |     
 | X                |   | O                |     
 | X                |   | O                |    
v|                  |BAR|                  |     (Cube: 1)
 | O                |   | X                |    
 | O                |   | X                |     
 | O           X    |   | X                |     
 | O           X    |   | X              O |     
 | O           X    |   | X              O |     Rolled 13
 +12-11-10--9--8--7-------6--5--4--3--2--1-+     X
@end group

(X) 
@end example

This is the output you will see if a graphical board is unavailable or
disabled; if your environment supports a graphical board, you will see a
better representation of a backgammon board than this.  Exactly the
same information is available, either way.

You have just won the opening roll (you have a 3, and @gnubg{} has a 1) --- the
dice roll is in the bottom right hand corner for the TTY board, and shown
as graphical dice on the right hand side of the board window.  The
position ID (the @samp{4HPwATDgc/ABMA} in this example) is an encoded
representation of the current position that comes in useful when using
some of @gnubg{}'s advanced commands; you can safely ignore it for now.
Notice that the prompt has changed to @samp{(X)}, to indicate that it
is X's (your) turn.

If you are familiar with backgammon, you will know that the best play
for this roll is to make your 5 point.  The command to do that is:

@example
(X) 8 5 6 5
@end example

@noindent
in the terminal window (i.e.@: move one chequer from your 8 point to your 5
point, and move another from your 6 to your 5 point); or by dragging
each chequer to the destination point with mouse button 1 in the board
window.  Click mouse button 1 on the dice to indicate you have finished
your move (just as you would pick up your dice to end your move if you
were playing on a real board).

Once you have done that, @gnubg{} will take its turn, rolling 63 and playing
24/15.  It is now your move again:

@example
@group
 GNU Backgammon  Position ID: 4HPwCSCwZ/ABMA
 +13-14-15-16-17-18------19-20-21-22-23-24-+     O
 | X           O    |   | O              X |     
 | X           O    |   | O              X |     
 | X           O    |   | O                |     
 | X                |   | O                |     
 | X                |   | O                |    
v|                  |BAR|                  |     (Cube: 1)
 | O                |   |                  |    
 | O                |   | X                |     
 | O                |   | X                |     
 | O           X    |   | X  X             |     
 | O     O     X    |   | X  X           O |     On roll
 +12-11-10--9--8--7-------6--5--4--3--2--1-+     X
@end group

(X) 
@end example

Since it is no longer the opening roll, you have the option of doubling
before rolling your dice.  To roll without doubling, just enter the
command @kbd{roll} (or @kbd{r} for short):

@example
(X) roll
@group
 GNU Backgammon  Position ID: 4HPwCSCwZ/ABMA
 +13-14-15-16-17-18------19-20-21-22-23-24-+     O
 | X           O    |   | O              X |     
 | X           O    |   | O              X |     
 | X           O    |   | O                |     
 | X                |   | O                |     
 | X                |   | O                |    
v|                  |BAR|                  |     (Cube: 1)
 | O                |   |                  |    
 | O                |   | X                |     
 | O                |   | X                |     
 | O           X    |   | X  X             |     
 | O     O     X    |   | X  X           O |     Rolled 35
 +12-11-10--9--8--7-------6--5--4--3--2--1-+     X
@end group

(X)
@end example

@noindent
(You can also roll by clicking the dice just underneath the board
window.)

Let's play this roll by hitting twice: 13/10*, 6/1*.  You can enter this
move with @kbd{13 10 6 1} --- note that you don't need to specify anything
special to hit; @gnubg{} will automatically move blots that are hit to the
bar.  You can also make this move by dragging chequers in the board window,
of course.

@example
(X) 13 10 6 1
@group
 GNU Backgammon  Position ID: 4HPwAWBhZ+IBMA
 +13-14-15-16-17-18------19-20-21-22-23-24-+     O
 | X           O    | O | O              X |     
 | X           O    | O | O              X |     
 | X           O    |   | O                |     
 | X                |   | O                |     
 |                  |   | O                |    
v|                  |BAR|                  |     (Cube: 1)
 | O                |   |                  |    
 | O                |   |                  |     
 | O                |   | X                |     
 | O           X    |   | X  X             |     
 | O     X     X    |   | X  X           X |     On roll
 +12-11-10--9--8--7-------6--5--4--3--2--1-+     X
@end group

(X) 
@end example

GNU Backgammon has rolled 65 and been unable to move.  Let's take another
roll:

@example
(X) roll
@group
 GNU Backgammon  Position ID: 4HPwAWBhZ+IBMA
 +13-14-15-16-17-18------19-20-21-22-23-24-+     O
 | X           O    | O | O              X |     
 | X           O    | O | O              X |     
 | X           O    |   | O                |     
 | X                |   | O                |     
 |                  |   | O                |    
v|                  |BAR|                  |     (Cube: 1)
 | O                |   |                  |    
 | O                |   |                  |     
 | O                |   | X                |     
 | O           X    |   | X  X             |     
 | O     X     X    |   | X  X           X |     Rolled 25
 +12-11-10--9--8--7-------6--5--4--3--2--1-+     X
@end group

(X)
@end example

Play this roll as @kbd{13 11 6 1}.  @gnubg{} will now roll 16 --- and still
can't move!

@example
@group
 GNU Backgammon  Position ID: 4HPwAWDDZsoBMA
 +13-14-15-16-17-18------19-20-21-22-23-24-+     O
 | X           O    | O | O              X |     
 | X           O    | O | O              X |     
 | X           O    |   | O                |     
 |                  |   | O                |     
 |                  |   | O                |    
v|                  |BAR|                  |     (Cube: 1)
 | O                |   |                  |    
 | O                |   |                  |     
 | O                |   |                  |     
 | O           X    |   | X  X           X |     
 | O  X  X     X    |   | X  X           X |     On roll
 +12-11-10--9--8--7-------6--5--4--3--2--1-+     X
@end group

(X) 
@end example

Our position is now strong.  Let's try doubling --- this can be done by
entering the command @kbd{double} at the prompt, or by clicking the
doubling cube in the board window (FIXME not implemented yet).  When
you are doubled, you should use the command @kbd{take} or @kbd{drop}
to accept or refuse the cube.  GNU Backgammon will drop this double
(FIXME actually it doesn't, but it will once it knows how):

@example
(X) double
O refuses the cube and gives up 1 point.
X wins a single game and 1 points.
The score (after 1 game) is: O 0, X 1.
@end example

That concludes the example game.  You have seen most of the commands
normally used while playing; others you will need include @kbd{bar}
when re-entering a hit chequer (e.g.@: @kbd{bar 20 24 20}) and
@kbd{off} to remove a chequer from the board when bearing off
(e.g.@: @kbd{6 off 5 off}).

Type @kbd{help} from within @gnubg{} for a summary of all commands, or
browse the rest of this manual to learn more.  Have fun playing
GNU Backgammon!

@ignore
We need to think of logical sections that each command belongs to so
that appropriate commands are documented together.  We can easily make
a table or summary later to group commands by name; for the rest of
the manual it is better to group them by purpose.

accept                  playing         / cube
agree                   playing
beaver                  playing         / cube
database dump           databases
database evaluate       databases
database generate       databases
database train          databases
decline                 playing
double                  playing         / cube
drop                    playing         / cube
eval                    analysis
exit                    invocation
help                    basic
hint                    playing?
load game               playing         / recording
load match              playing         / recording
load weights            training
move                    playing
new game                playing
new match               playing         / matches and sessions
new session             playing         / matches and sessions
play                    playing         / computer player
quit                    invocation
redouble                playing         / cube
reject                  playing
resign                  playing
roll                    playing         / dice
rollout                 analysis
save game               playing         / recording
save match              playing         / recording
save weights            training
set autobearoff         playing
set autogame            playing         / matches and sessions
set automove            playing
set autoroll            playing         / dice
set board               playing
set cache               analysis?
set crawford            playing         / matches and sessions
set cube centre         playing         / cube
set cube owner          playing         / cube
set cube value          playing         / cube
set dice                playing         / dice
set display             playing?
set jacoby              playing         / matches and sessions
set player gnubg        playing         / computer player
set player human        playing         
set player name         playing         
set player plies        playing         / computer player
set player pubeval      playing         / computer player
set plies               analysis
set postcrawford        playing         / matches and sessions
set prompt              playing?
set rng ansi            playing         / dice
set rng bsd             playing         / dice
set rng isaac           playing         / dice
set rng manual          playing         / dice
set rng mersenne        playing         / dice
set rng user            playing         / dice
set score               playing         / matches and sessions
set seed                playing         / dice
set turn                playing
show board              playing
show cache              analysis?
show copying            basic
show crawford           playing         / matches and sessions
show dice               playing         / dice
show jacoby             playing         / matches and sessions
show pipcount           playing
show player             playing
show postcrawford       playing         / matches and sessions
show rng                playing         / dice
show score              playing         / matches and sessions
show seed               playing         / dice
show turn               playing
show warranty           basic
take                    playing         / cube
train database          databases
train td                training
@end ignore

@node Invocation
@chapter Starting and Leaving @gnubg

This chapter describes how to run @gnubg{}, and how to end it when you
are finished.

@menu
* Invoking gnubg::              How to start gnubg.
* Leaving gnubg::               How to end gnubg.
* Shell Commands::              How to issue shell commands from within gnubg.
@end menu

@node Invoking gnubg
@section Invoking @gnubg
@cindex invoking @t{gnubg}
@cindex starting @t{gnubg}
@cindex running @t{gnubg}
@cindex command line options

Start GNU Backgammon by running the program @kbd{gnubg}.  Once started, it
will process commands from the terminal.

You can also instruct @gnubg{} to read an existing match from a file, to
play or analyse.  (FIXME actually you can't yet, but you should be able
to.)  To read the match from @var{filename}, specify
@kbd{gnubg @var{filename}}.

@gnubg{} will give you a short summary of how to invoke it if given the
option @option{--help} (@option{-h} for short), and report its version
with @option{--version} (@option{-v}).

GNU Backgammon will normally use a graphical board window under the X
Window System, if possible.  To prevent this behaviour and use standard
terminal output instead, you can specify the @option{--tty} option (which
can be abbreviated to @option{-t}).

@node Leaving gnubg
@section Leaving @gnubg
@cindex leaving @t{gnubg}
@cindex exiting @t{gnubg}

@table @code
@kindex exit
@kindex quit
@item exit
@itemx quit
To exit @gnubg{}, use the @kbd{exit} or @kbd{quit} commands (they are
synonymous).  If you are currently playing a game, the match in progress
will be lost, so @gnubg{} will ask you if you are sure you want to exit
in this case.  (FIXME it doesn't yet, but it should.)
@end table

@gnubg{} will also exit upon end-of-file; you can therefore exit by typing
an end-of-file character (usually @kbd{C-d}, i.e. hold the @key{CTRL}
key and press D).

@cindex interrupting @t{gnubg}
@cindex cancelling commands
If you send an interrupt sequence (often by pressing @kbd{C-c}), the
current @gnubg{} command (if any) will be terminated.  This can be useful
if you do not want to wait for a slow command to complete.

@node Shell Commands
@section Shell Commands
@cindex shell commands
@cindex escapes, shell

You can execute shell commands from @gnubg{} without leaving or suspending it.

@table @code
@kindex !
@item !@var{command}
Invoke a subshell to execute @var{command}.  The environment variable
@code{SHELL} determines which shell to use (@gnubg{} defaults to
@file{/bin/sh} if @code{$SHELL} is not set).  FIXME not implemented yet.
@end table

@node Basic Commands
@chapter Basic Commands
@cindex basic commands
@cindex commands, basic

There are a few simple commands...

FIXME help, ?, show copying, show warranty

@node Playing
@chapter Playing Backgammon with @gnubg
@cindex playing commands
@cindex commands, playing

FIXME introduction

@menu
* The Game::                      Commands used during the game.
* Dice::                          Controlling dice rolls.
* Computer Player::               Having gnubg make moves.
* Matches and Sessions::          Playing series of games.
* Cube::                          Using the doubling cube.
* Recording::                     Saving games and matches.
@end menu

@node The Game
@section Commands Used During the Game
@cindex game commands

FIXME

agree
decline
hint
move
new game
set/show board
show pipcount
set player human,set player name, show player
set/show turn
reject
resign
set autobearoff, set automove
set display

@node Dice
@section Controlling Dice Rolls
@cindex dice
@cindex rolls, dice

FIXME

@node Computer Player
@section Having @gnubg{} Make Moves
@cindex computer player
@cindex @t{gnubg}, making moves @comment @gnubg{}, doesn't work here, why?

FIXME

@node Matches and Sessions
@section Matches and Sessions
@cindex matches
@cindex sessions

This section describes how to use GNU Backgammon to play series of
games, whether those games are part of a match (as in tournament
backgammon) or a session of independent games (conventionally
called ``money'' play, regardless of whether any money is involved).

FIXME

@node Cube
@section The Doubling Cube
@cindex cube, doubling
@cindex doubling

FIXME

@node Recording
@section Saving Games and Matches
@cindex recording matches
@cindex saving matches
@cindex matches, saving
@cindex games, saving

FIXME

@node Analysis
@chapter Using @gnubg{} to Analyse Positions
@cindex analysis of positions
@cindex position analysis

FIXME

@node Databases
@chapter Position Databases
@cindex databases
@cindex position databases

FIXME

@node Training
@chapter Modifying @gnubg{}'s Neural Nets
@cindex training
@cindex neural nets, training

FIXME

@node Frequently Asked Questions
@chapter Frequently Asked Questions
@cindex frequently asked questions
@cindex FAQ

@menu
* Where can I get GNU Backgammon?::
* How do I play a game?::
* gnubg.bd errors::
* gnubg.weights errors::
* Black and white board window::
@end menu

@node Where can I get GNU Backgammon?
@section Where can I get GNU Backgammon?
@cindex obtaining @t{gnubg}

Pre-release snapshots of GNU Backgammon are periodically made available
for FTP at @uref{ftp://alpha.gnu.org/}.  FIXME:complete URL.

If you want to experiment with the very latest code, the development
sources are kept in a CVS repository at @uref{http://subversions.gnu.org/}.
FIXME:complete URL.

@node How do I play a game?
@section How do I play a game?
@cindex playing a game
@cindex moving chequers

Once you are running @gnubg{}, enter @kbd{new game} at the @samp{(gnubg)}
prompt to start a game against the computer opponent.  You should now
see a board (if an X display is available, @gnubg{} will use a graphical
board window; otherwise, it will display an ASCII board on your
terminal).  If @gnubg{} won the opening roll, it will have moved; you can
now type @kbd{roll} (or click on the dice below the board if you are
using X) to roll the dice yourself.  In either case, it will now be your
move; you should enter the moves for each chequer as pairs of numbers.
For instance, if you have rolled 3 and 1, you could type @kbd{8 5 6 5}
to move one chequer from the 8 point to the 5 point and another from
the 6 point to the 5 point.  Use @kbd{bar} to move from the bar, and
@kbd{off} to bear off.  If you are using the X board window, you
can also drag chequers around the board with mouse button 1.  Click on
the dice when you have finished.

@node gnubg.bd errors
@section I only see @samp{gnubg.bd: No such file or directory}.  What's wrong?
@vindex gnubg.bd
@cindex errors starting @t{gnubg}

The file @file{gnubg.bd} is the bearoff database that @gnubg{} uses to
evaluate endgame positions.  @gnubg{} will look for it first in the current
directory and then in the installed directory (@file{/usr/local/share/gnubg/}
by default).

The @gnubg{} distribution is set up to create @file{gnubg.bd} by itself
during compilation, but it can be a slow process (taking half an hour
or more, depending on the speed of your computer).  If you would rather
not wait to generate the database yourself, you can obtain a copy
via FTP from @uref{ftp://alpha.gnu.org/}. FIXME:complete URL.

@node gnubg.weights errors
@section Now I get @samp{gnubg.weights: No such file or directory}.  What's that?
@vindex gnubg.weights
@cindex errors starting @t{gnubg}

The file @file{gnubg.weights} contains the trained neural net weights
for most of @gnubg{}'s position evaluators.  Like @file{gnubg.bd}, it should
be kept in either the current directory or the installed directory.

You should be able to obtain a copy from wherever you found the @gnubg{}
distribution.  Future releases of @gnubg{} will allow you to start without
any existing weights at all, if you want to train your own.

@node Black and white board window
@section The board window is shown in black and white and looks awful!  What's wrong?

If you see this problem, your X server is probably using a
@dfn{PseudoColor} visual, and is dynamically allocating colours
to clients from a limited colourmap.  On these types of displays, 
@gnubg{} tries to be a well-behaved client by using colours from the
default standard colourmap.  This will allow it to share colours
with other clients that use the same scheme, which will help them
all to use as many colours as possible without exhausting the
colourmap.

Unfortunately, not all X clients use standard colourmaps.  If other
clients have been run before @gnubg{} and allocated most of the colours,
then there may not be enough left for @gnubg{} to allocate a standard
colourmap.  If this happens, it will just take what it can get (which
in the worst case might be black and white only).  You can try to
avoid this problem by running @gnubg{} before other colour-hungry clients,
or by using the @file{xstdcmap} utility to install the default
standard colourmap early in your session while colours are still
available.  Depending on your hardware, you may be able to configure
your display to allow more colours, or use a @dfn{DirectColor} or
@dfn{TrueColor} visual which should resolve the problem.

Of course, if your X server can only display black and white (not even
shades of grey), then there's not much you can do!

@ignore
Hopefully nobody will ask this question, but I suppose it will happen...

@node Are the dice fair?
@end ignore

@node Concept Index
@unnumbered Index
@printindex cp

@contents
@bye
